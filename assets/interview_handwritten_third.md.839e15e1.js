import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.97257f7d.js";const d=JSON.parse('{"title":"第三题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/handwritten/third.md","filePath":"interview/handwritten/third.md"}'),p={name:"interview/handwritten/third.md"},o=l(`<h1 id="第三题" tabindex="-1">第三题 <a class="header-anchor" href="#第三题" aria-label="Permalink to &quot;第三题&quot;">​</a></h1><h2 id="deepclone" tabindex="-1">deepclone <a class="header-anchor" href="#deepclone" aria-label="Permalink to &quot;deepclone&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#268BD2;">deepClone</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (source) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">targetObj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">isArray</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">source</span><span style="color:#657B83;">) </span><span style="color:#859900;">?</span><span style="color:#657B83;"> [] </span><span style="color:#859900;">:</span><span style="color:#657B83;"> {} </span><span style="color:#93A1A1;font-style:italic;">// 判断复制的目标是数组还是对象</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">keys</span><span style="color:#657B83;"> </span><span style="color:#859900;">in</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">source</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">// 遍历目标</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">source</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">hasOwnProperty</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">)) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">source</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">] </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#657B83;"> </span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">source</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">] </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;object&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#93A1A1;font-style:italic;">// 如果值是对象，就递归一下</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">targetObj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">isArray</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">source</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">]) </span><span style="color:#859900;">?</span><span style="color:#657B83;"> [] </span><span style="color:#859900;">:</span><span style="color:#657B83;"> {}</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">targetObj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">deepClone</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">source</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">])</span></span>
<span class="line"><span style="color:#657B83;">      } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#93A1A1;font-style:italic;">// 如果不是，就直接赋值</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">targetObj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">source</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">keys</span><span style="color:#657B83;">]</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">targetObj</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">str1</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  arr: [</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">],</span></span>
<span class="line"><span style="color:#657B83;">  obj: {</span></span>
<span class="line"><span style="color:#657B83;">    key: </span><span style="color:#2AA198;">&#39;value&#39;</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  },</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">: </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> () {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span></span>
<span class="line"><span style="color:#657B83;">  },</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">str3</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">deepClone</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">str1</span><span style="color:#657B83;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">str1</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">name</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;adsfsf&#39;</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">str3</span><span style="color:#657B83;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">targetObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(source) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// 判断复制的目标是数组还是对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> keys </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> source) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历目标</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(keys)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source[keys] </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> source[keys] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果值是对象，就递归一下</span></span>
<span class="line"><span style="color:#24292E;">        targetObj[keys] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(source[keys]) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">        targetObj[keys] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(source[keys])</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不是，就直接赋值</span></span>
<span class="line"><span style="color:#24292E;">        targetObj[keys] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source[keys]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> targetObj</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  arr: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  obj: {</span></span>
<span class="line"><span style="color:#24292E;">    key: </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(str1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">str1.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;adsfsf&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str3)</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  a: </span><span style="color:#D33682;">1</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  b: {</span></span>
<span class="line"><span style="color:#657B83;">    name: </span><span style="color:#2AA198;">&#39;b&#39;</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">    sex: </span><span style="color:#2AA198;">&#39;man&#39;</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  },</span></span>
<span class="line"><span style="color:#657B83;">  c: { vue: </span><span style="color:#2AA198;">&#39;first&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">checkType</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (obj) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">Object</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">toString</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">).</span><span style="color:#268BD2;">slice</span><span style="color:#657B83;">(</span><span style="color:#D33682;">8</span><span style="color:#657B83;">, </span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">deepcopy</span><span style="color:#657B83;">(obj) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">tempobj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {}</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">item</span><span style="color:#657B83;"> </span><span style="color:#859900;">in</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">hasOwnProperty</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">item</span><span style="color:#657B83;">)) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">tempobj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">item</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">checkType</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">item</span><span style="color:#657B83;">]) </span><span style="color:#859900;">==</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;Object&#39;</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">deepcopy</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">item</span><span style="color:#657B83;">]) </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">item</span><span style="color:#657B83;">]</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">tempobj</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">newobj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">deepcopy</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#268BD2;">newobj</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">d</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;hhhh&#39;</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">newobj</span><span style="color:#657B83;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  b: {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    sex: </span><span style="color:#032F62;">&#39;man&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  c: { vue: </span><span style="color:#032F62;">&#39;first&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj).</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepcopy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tempobj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(item)) {</span></span>
<span class="line"><span style="color:#24292E;">      tempobj[item] </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkType</span><span style="color:#24292E;">(obj[item]) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepcopy</span><span style="color:#24292E;">(obj[item]) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> obj[item]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tempobj</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newobj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepcopy</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#24292E;">newobj.d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hhhh&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newobj)</span></span></code></pre></div><h2 id="curry" tabindex="-1">curry <a class="header-anchor" href="#curry" aria-label="Permalink to &quot;curry&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;">(fn) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.length </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">_curried</span><span style="color:#657B83;">(depth, args) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (newArgument) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">depth</span><span style="color:#657B83;"> </span><span style="color:#859900;">-</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">newArgument</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">_curried</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">depth</span><span style="color:#657B83;"> </span><span style="color:#859900;">-</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">, [</span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">newArgument</span><span style="color:#657B83;">])</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">_curried</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.length, [])</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">add</span><span style="color:#657B83;">(a, b) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">a</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">b</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curriedAdd</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">add</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">addFive</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curriedAdd</span><span style="color:#657B83;">(</span><span style="color:#D33682;">5</span><span style="color:#657B83;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [</span><span style="color:#D33682;">0</span><span style="color:#657B83;">, </span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">, </span><span style="color:#D33682;">4</span><span style="color:#657B83;">, </span><span style="color:#D33682;">5</span><span style="color:#657B83;">].</span><span style="color:#268BD2;">map</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">addFive</span><span style="color:#657B83;">) </span><span style="color:#93A1A1;font-style:italic;">// [5, 6, 7, 8, 9, 10]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fn.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_curried</span><span style="color:#24292E;">(</span><span style="color:#E36209;">depth</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">newArgument</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (depth </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args, newArgument)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_curried</span><span style="color:#24292E;">(depth </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args, newArgument])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_curried</span><span style="color:#24292E;">(fn.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, [])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> curriedAdd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(add)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> addFive </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curriedAdd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(addFive) </span><span style="color:#6A737D;">// [5, 6, 7, 8, 9, 10]</span></span></code></pre></div><h2 id="一行实现柯里化" tabindex="-1">一行实现柯里化 <a class="header-anchor" href="#一行实现柯里化" aria-label="Permalink to &quot;一行实现柯里化&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#93A1A1;font-style:italic;">//一行实现柯里化</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span></span>
<span class="line"><span style="color:#657B83;">  (fn, arr </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">  (</span><span style="color:#859900;">...</span><span style="color:#657B83;">args) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">    ((arg) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">arg</span><span style="color:#657B83;">.length </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.length </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">arg</span><span style="color:#657B83;">) </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">arg</span><span style="color:#657B83;">)))([</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">...</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">    ])</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">add</span><span style="color:#657B83;">(a, b, c, d) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">a</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">b</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">c</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">d</span><span style="color:#657B83;"> </span><span style="color:#93A1A1;font-style:italic;">// body</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">addCurry</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">add</span><span style="color:#657B83;">())</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">addCurry</span><span style="color:#657B83;">(</span><span style="color:#D33682;">4</span><span style="color:#657B83;">)(</span><span style="color:#D33682;">5</span><span style="color:#657B83;">)(</span><span style="color:#D33682;">6</span><span style="color:#657B83;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//一行实现柯里化</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    ((</span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (arg.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> fn.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arg) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(fn, arg)))([</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args,</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#E36209;">d</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> d </span><span style="color:#6A737D;">// body</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> addCurry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">addCurry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span></code></pre></div><h2 id="手写new" tabindex="-1">手写new <a class="header-anchor" href="#手写new" aria-label="Permalink to &quot;手写new&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#268BD2;">Array</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">myisArray</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (data) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">typeArray</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">Object</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">toString</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">data</span><span style="color:#657B83;">).</span><span style="color:#268BD2;">slice</span><span style="color:#657B83;">(</span><span style="color:#D33682;">7</span><span style="color:#657B83;">, </span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">typeArray</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">trim</span><span style="color:#657B83;">())</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">typeArray</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">trim</span><span style="color:#657B83;">() </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;Array&#39;</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">myisArray</span><span style="color:#657B83;">([</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">]))</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//实现一个object.create</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">create</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (o) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">F</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> () {}</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">F</span><span style="color:#657B83;">.prototype </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">o</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">F</span><span style="color:#657B83;">()</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//实现一个new方法</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">createNew</span><span style="color:#657B83;">(Con, </span><span style="color:#859900;">...</span><span style="color:#657B83;">args) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// 创建一个空的对象</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {}</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// 将空对象指向构造函数的原型链</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">Object</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">setPrototypeOf</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">, </span><span style="color:#859900;">Con</span><span style="color:#657B83;">.prototype)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// obj绑定到构造函数上，便可以访问构造函数中的属性，即this.obj.Con(args)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Con</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">apply</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">args</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// 如果返回的result是一个对象则返回</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// new方法失效，否则返回obj</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">instanceof</span><span style="color:#657B83;"> </span><span style="color:#CB4B16;">Object</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">obj</span></span>
<span class="line"><span style="color:#657B83;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">myisArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> typeArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(data).</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(typeArray.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> typeArray.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Array&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.</span><span style="color:#6F42C1;">myisArray</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#6A737D;">//实现一个object.create</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">F</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> o</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//实现一个new方法</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createNew</span><span style="color:#24292E;">(</span><span style="color:#E36209;">Con</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建一个空的对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将空对象指向构造函数的原型链</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">setPrototypeOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.obj, </span><span style="color:#005CC5;">Con</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// obj绑定到构造函数上，便可以访问构造函数中的属性，即this.obj.Con(args)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Con.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.obj, args)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果返回的result是一个对象则返回</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// new方法失效，否则返回obj</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.obj</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="实现bind" tabindex="-1">实现bind <a class="header-anchor" href="#实现bind" aria-label="Permalink to &quot;实现bind&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#859900;">Function</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">myBind</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (context, </span><span style="color:#859900;">...</span><span style="color:#657B83;">args) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> () </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">apply</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">context</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">args</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">person</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  age: </span><span style="color:#D33682;">20</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">getAge</span><span style="color:#657B83;">() {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">age</span></span>
<span class="line"><span style="color:#657B83;">  },</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">getAge</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">person</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">getAge</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">myBind</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">person</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">getAge</span><span style="color:#657B83;">()) </span><span style="color:#93A1A1;font-style:italic;">// output :20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getAge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> person.getAge.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;">(person)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// output :20</span></span></code></pre></div>`,12),e=[o];function t(c,r,y,B,i,E){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
