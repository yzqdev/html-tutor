import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.97257f7d.js";const A=JSON.parse('{"title":"手写代码1","description":"","frontmatter":{},"headers":[],"relativePath":"interview/handwritten/first.md","filePath":"interview/handwritten/first.md"}'),p={name:"interview/handwritten/first.md"},o=l(`<h1 id="手写代码1" tabindex="-1">手写代码1 <a class="header-anchor" href="#手写代码1" aria-label="Permalink to &quot;手写代码1&quot;">​</a></h1><h2 id="this-bind-call" tabindex="-1">this bind call <a class="header-anchor" href="#this-bind-call" aria-label="Permalink to &quot;this bind call&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">5</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  number: </span><span style="color:#D33682;">3</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  fn: (</span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> () {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">number</span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#859900;">number</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">*=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">2</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">*</span><span style="color:#657B83;"> </span><span style="color:#D33682;">2</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">3</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> () {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">num</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">number</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">*=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">2</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">num</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">number</span><span style="color:#657B83;"> </span><span style="color:#859900;">*=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">3</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">number</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  })(),</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">myFun</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">fn</span></span>
<span class="line"><span style="color:#268BD2;">myFun</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#B58900;">null</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#268BD2;">obj</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">()</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">number</span><span style="color:#657B83;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  number: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  fn: (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> number</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.number </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.number</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.number </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num)</span></span>
<span class="line"><span style="color:#24292E;">      number </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(number)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })(),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myFun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.fn</span></span>
<span class="line"><span style="color:#24292E;">myFun.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.number)</span></span></code></pre></div><h2 id="实现call" tabindex="-1">实现call <a class="header-anchor" href="#实现call" aria-label="Permalink to &quot;实现call&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#859900;">Function</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">mycall</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (context </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">window</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#657B83;">args) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">context</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">context</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">delete</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">adddd</span><span style="color:#657B83;">(a, b) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">c</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">a</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">b</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">c</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">c</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {}</span></span>
<span class="line"><span style="color:#268BD2;">adddd</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">mycall</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">c</span><span style="color:#657B83;">, </span><span style="color:#D33682;">45</span><span style="color:#657B83;">, </span><span style="color:#D33682;">555</span><span style="color:#657B83;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">mycall</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  context.fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adddd</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(c)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">adddd.</span><span style="color:#6F42C1;">mycall</span><span style="color:#24292E;">(c, </span><span style="color:#005CC5;">45</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">555</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="实现一个instanceof和new" tabindex="-1">实现一个instanceof和new <a class="header-anchor" href="#实现一个instanceof和new" aria-label="Permalink to &quot;实现一个instanceof和new&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">create</span><span style="color:#657B83;">() {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {};</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">constructort</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [].</span><span style="color:#268BD2;">shift</span><span style="color:#657B83;">().</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">arguments</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">.__proto__ </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">constructort</span><span style="color:#657B83;">.prototype;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">constructort</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">apply</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">arguments</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">\`object\`</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">obj</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">myInstanceOf</span><span style="color:#657B83;">(left</span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#859900;">string</span><span style="color:#657B83;">, right</span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#859900;">string</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">lproto</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Object</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">getPrototypeOf</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">left</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">while</span><span style="color:#657B83;"> (</span><span style="color:#B58900;">true</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">lproto</span><span style="color:#657B83;"> </span><span style="color:#859900;">==</span><span style="color:#657B83;"> </span><span style="color:#B58900;">null</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">lproto</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#859900;">right</span><span style="color:#657B83;">.prototype) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">lproto</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Object</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">getPrototypeOf</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">lproto</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">myInstanceOf</span><span style="color:#657B83;">([</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">], </span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">)) </span><span style="color:#93A1A1;font-style:italic;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">constructort</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  obj.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">constructort</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructort.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(obj, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`object\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myInstanceOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">left</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">right</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lproto </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(left)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lproto </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lproto </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">right</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    lproto </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(lproto)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">myInstanceOf</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], Array)) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="实现promise" tabindex="-1">实现promise <a class="header-anchor" href="#实现promise" aria-label="Permalink to &quot;实现promise&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">(func) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">fullfilled</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">rejected</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">pending</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">handlers</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">errorHandlers</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#657B83;">args) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">handlers</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">((handler) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">handler</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">))</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#657B83;">args) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">errorHandlers</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">((handler) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">handler</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">))</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">func</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">bind</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">), </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">bind</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">))</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">Mypromise</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (func) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">handlers</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">func</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#859900;">Mypromise</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">catch</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (func) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">errorHandlers</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">func</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">race</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (promises) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">((promise) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">promise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    })</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">all</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (promises) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">len</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">.length</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">res</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">((p, i) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">p</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">((r) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">len</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">res</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">        } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#268BD2;">res</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">r</span></span>
<span class="line"><span style="color:#657B83;">        }</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">len</span><span style="color:#859900;">--</span></span>
<span class="line"><span style="color:#657B83;">      }, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    })</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">// test</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">p1</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">((resolve) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">bind</span><span style="color:#657B83;">(</span><span style="color:#B58900;">null</span><span style="color:#657B83;">, </span><span style="color:#2AA198;">&#39;resolved&#39;</span><span style="color:#657B83;">), </span><span style="color:#D33682;">3000</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#268BD2;">p1</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">).</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">((</span><span style="color:#859900;">...</span><span style="color:#657B83;">args) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">&#39;second&#39;</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">p2</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Mypromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">bind</span><span style="color:#657B83;">(</span><span style="color:#B58900;">null</span><span style="color:#657B83;">, </span><span style="color:#2AA198;">&#39;rejected&#39;</span><span style="color:#657B83;">), </span><span style="color:#D33682;">3000</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#268BD2;">p2</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">).</span><span style="color:#268BD2;">catch</span><span style="color:#657B83;">((</span><span style="color:#859900;">...</span><span style="color:#657B83;">args) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">&#39;fail&#39;</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mypromise</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fullfilled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rejected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.errorHandlers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlers.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.errorHandlers.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  func.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, resolve.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">), reject.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Mypromise</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(func)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Mypromise</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.errorHandlers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(func)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Mypromise.</span><span style="color:#6F42C1;">race</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">promises</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mypromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    promises.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">promise</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Mypromise.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">promises</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mypromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> promises.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    promises.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      p.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">r</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          res[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        len</span><span style="color:#D73A49;">--</span></span>
<span class="line"><span style="color:#24292E;">      }, reject)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// test</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">p1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mypromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;resolved&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">p1.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(console.log).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;second&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">p2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mypromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(reject.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;rejected&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">p2.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(console.log).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fail&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args))</span></span></code></pre></div><h3 id="promise2" tabindex="-1">promise2 <a class="header-anchor" href="#promise2" aria-label="Permalink to &quot;promise2&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">resolvePromise</span><span style="color:#657B83;">(promise2, x, resolve, reject) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// console.log(promise2===x)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">//判断x和promise2之间的关系</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">//因为promise2是上一个promise.then后的返回结果，所以如果相同，会导致下面的.then会是同一个promise2，一直都是，没有尽头</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//相当于promise.then之后return了自己，因为then会等待return后的promise，导致自己等待自己，一直处于等待</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">TypeError</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">&#39;循环引用&#39;</span><span style="color:#657B83;">))</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">//如果x不是null，是对象或者方法</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">!==</span><span style="color:#657B83;"> </span><span style="color:#B58900;">null</span><span style="color:#657B83;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#657B83;"> (</span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;object&#39;</span><span style="color:#657B83;"> </span><span style="color:#859900;">||</span><span style="color:#657B83;"> </span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;function&#39;</span><span style="color:#657B83;">)) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//为了判断resolve过的就不用再reject了，（比如有reject和resolve的时候）</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">called</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">try</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">//防止then出现异常，Object.defineProperty</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">then</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;"> </span><span style="color:#93A1A1;font-style:italic;">//取x的then方法可能会取到{then:{}},并没有执行</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">then</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;function&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#93A1A1;font-style:italic;">//我们就认为他是promise,call他,因为then方法中的this来自自己的promise对象</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">then</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#268BD2;">x</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">          (y) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//第一个参数是将x这个promise方法作为this指向，后两个参数分别为成功失败回调</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">called</span><span style="color:#657B83;">) </span><span style="color:#859900;">return</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">called</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//因为可能promise中还有promise，所以需要递归</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">// resolvePromise(promise2,y,resolve,reject)</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">y</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">          },</span></span>
<span class="line"><span style="color:#657B83;">          (err) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">called</span><span style="color:#657B83;">) </span><span style="color:#859900;">return</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">called</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//一次错误就直接返回</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">err</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">          }</span></span>
<span class="line"><span style="color:#657B83;">        )</span></span>
<span class="line"><span style="color:#657B83;">      } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#93A1A1;font-style:italic;">//如果是个普通对象就直接返回resolve作为结果</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">x</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">    } </span><span style="color:#859900;">catch</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">called</span><span style="color:#657B83;">) </span><span style="color:#859900;">return</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">called</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//这里返回的是非函数，非对象的值,就直接放在promise2的resolve中作为结果</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">x</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">class</span><span style="color:#657B83;"> </span><span style="color:#CB4B16;">MyPromise</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">constructor</span><span style="color:#657B83;">(executor, name) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">name</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">name</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//控制状态，使用了一次之后，接下来的都不被使用</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;pendding&#39;</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">value</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">undefined</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reason</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#B58900;">undefined</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//存放成功回调的函数</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//存放失败回调的函数</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//定义resolve函数</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (data) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;pendding&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#93A1A1;font-style:italic;">// this.status = &#39;resolve&#39;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">rv</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">data</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">rv</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (data) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">value</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">data</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">//假如第一次实力的promise的</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">data</span><span style="color:#657B83;"> </span><span style="color:#859900;">instanceof</span><span style="color:#657B83;"> </span><span style="color:#CB4B16;">MyPromise</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;pendding&#39;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">data</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">rv</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">rj</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;resolve&#39;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#93A1A1;font-style:italic;">//监听回调函数(如果data是promise，则上一个的会等待这个data执行了这个rv方法之后在执行，它本身的成功回调)</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">((fn) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">())</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//定义reject函数</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (data) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;pendding&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">rj</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">data</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">rj</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (data) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reason</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">data</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">//假如第一次实力的promise的</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">data</span><span style="color:#657B83;"> </span><span style="color:#859900;">instanceof</span><span style="color:#657B83;"> </span><span style="color:#CB4B16;">MyPromise</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;pendding&#39;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">data</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">rv</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">rj</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;reject&#39;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">((fn) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">())</span></span>
<span class="line"><span style="color:#657B83;">      }</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">try</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">//将resolve和reject函数给使用者</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">executor</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    } </span><span style="color:#859900;">catch</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">//如果在函数中抛出异常则将它注入reject中</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(onFulfilled, onRejected) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">// console.log(onFufilled.a)</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//解决onFufilled,onRejected没有传值的问题</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;function&#39;</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> (y) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">y</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后then的resolve中捕获</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">onRejected</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onRejected</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onRejected</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#859900;">:</span><span style="color:#657B83;"> (err) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#859900;">throw</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">err</span></span>
<span class="line"><span style="color:#657B83;">          }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//声明一个promise对象</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promise2</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;resolve&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">//因为在.then之后又是一个promise对象，所以这里肯定要返回一个promise对象</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#93A1A1;font-style:italic;">//因为穿透值的缘故，在默认的跑出一个error后，不能再用下一个的reject来接受，只能通过try，catch</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#859900;">try</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//因为有的时候需要判断then中的方法是否返回一个promise对象，所以需要判断</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//如果返回值为promise对象，则需要取出结果当作promise2的resolve结果</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//如果不是，直接作为promise2的resolve结果</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">value</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#93A1A1;font-style:italic;">//抽离出一个公共方法来判断他们是否为promise对象</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">resolvePromise</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">x</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">          } </span><span style="color:#859900;">catch</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">          }</span></span>
<span class="line"><span style="color:#657B83;">        }, </span><span style="color:#D33682;">0</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      })</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;reject&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#859900;">try</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onRejected</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reason</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">resolvePromise</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">x</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">          } </span><span style="color:#859900;">catch</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">          }</span></span>
<span class="line"><span style="color:#657B83;">        }, </span><span style="color:#D33682;">0</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      })</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">status</span><span style="color:#657B83;"> </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;pendding&#39;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#93A1A1;font-style:italic;">// to do....</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#859900;">try</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">              </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">value</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">              </span><span style="color:#268BD2;">resolvePromise</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">x</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">            } </span><span style="color:#859900;">catch</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">              </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">            }</span></span>
<span class="line"><span style="color:#657B83;">          }, </span><span style="color:#D33682;">0</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">        })</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">            </span><span style="color:#859900;">try</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">              </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">x</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">onRejected</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reason</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">              </span><span style="color:#268BD2;">resolvePromise</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">promise2</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">x</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">            } </span><span style="color:#859900;">catch</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">              </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">e</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">            }</span></span>
<span class="line"><span style="color:#657B83;">          })</span></span>
<span class="line"><span style="color:#657B83;">        })</span></span>
<span class="line"><span style="color:#657B83;">      })</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promise2</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">//catch方法</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">catch</span><span style="color:#657B83;">(onRejected) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#B58900;">null</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">onRejected</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">finally</span><span style="color:#657B83;">(callback) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">P</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.constructor</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span></span>
<span class="line"><span style="color:#657B83;">      (value) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">P</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">callback</span><span style="color:#657B83;">()).</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">value</span><span style="color:#657B83;">),</span></span>
<span class="line"><span style="color:#657B83;">      (reason) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">P</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">callback</span><span style="color:#657B83;">()).</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">          </span><span style="color:#859900;">throw</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">reason</span></span>
<span class="line"><span style="color:#657B83;">        })</span></span>
<span class="line"><span style="color:#657B83;">    )</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">done</span><span style="color:#657B83;">(onFulfilled, onRejected) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">catch</span><span style="color:#657B83;">(</span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (reason) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#93A1A1;font-style:italic;">// 抛出一个全局错误</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">setTimeout</span><span style="color:#657B83;">(() </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#859900;">throw</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">reason</span></span>
<span class="line"><span style="color:#657B83;">      }, </span><span style="color:#D33682;">0</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    })</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//resolve方法</span></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (val) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">val</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//reject方法</span></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reject</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (val) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">val</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//race方法</span></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">race</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (promises) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">].</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)</span></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">all</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (promises) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">processData</span><span style="color:#657B83;">(index, data) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">index</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">data</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">==</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">.length) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">promises</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">].</span><span style="color:#268BD2;">then</span><span style="color:#657B83;">((data) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">        </span><span style="color:#268BD2;">processData</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">data</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">      }, </span><span style="color:#268BD2;">reject</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//promise语法糖 也用来测试</span></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">deferred</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">defer</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> () {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">dfd</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {}</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">dfd</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">promise</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span><span style="color:#657B83;">((resolve, reject) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">dfd</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">resolve</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">dfd</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reject</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">reject</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">dfd</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promise规范  使用</span></span>
<span class="line"><span style="color:#859900;">module</span><span style="color:#657B83;">.</span><span style="color:#859900;">exports</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">MyPromise</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">// export default Promise</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolvePromise</span><span style="color:#24292E;">(</span><span style="color:#E36209;">promise2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(promise2===x)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//判断x和promise2之间的关系</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//因为promise2是上一个promise.then后的返回结果，所以如果相同，会导致下面的.then会是同一个promise2，一直都是，没有尽头</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> promise2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//相当于promise.then之后return了自己，因为then会等待return后的promise，导致自己等待自己，一直处于等待</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;循环引用&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//如果x不是null，是对象或者方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//为了判断resolve过的就不用再reject了，（比如有reject和resolve的时候）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> called</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//防止then出现异常，Object.defineProperty</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> then </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.then </span><span style="color:#6A737D;">//取x的then方法可能会取到{then:{}},并没有执行</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> then </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//我们就认为他是promise,call他,因为then方法中的this来自自己的promise对象</span></span>
<span class="line"><span style="color:#24292E;">        then.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          x,</span></span>
<span class="line"><span style="color:#24292E;">          (</span><span style="color:#E36209;">y</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//第一个参数是将x这个promise方法作为this指向，后两个参数分别为成功失败回调</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (called) </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">            called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//因为可能promise中还有promise，所以需要递归</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// resolvePromise(promise2,y,resolve,reject)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(y)</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">          (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (called) </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">            called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//一次错误就直接返回</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果是个普通对象就直接返回resolve作为结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(x)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (called) </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//这里返回的是非函数，非对象的值,就直接放在promise2的resolve中作为结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(x)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">executor</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//控制状态，使用了一次之后，接下来的都不被使用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pendding&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.reason </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//存放成功回调的函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onResolvedCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//存放失败回调的函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onRejectedCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//定义resolve函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pendding&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// this.status = &#39;resolve&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rv</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//假如第一次实力的promise的</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pendding&#39;</span></span>
<span class="line"><span style="color:#24292E;">        data.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(rv, rj)</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;resolve&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//监听回调函数(如果data是promise，则上一个的会等待这个data执行了这个rv方法之后在执行，它本身的成功回调)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onResolvedCallbacks.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//定义reject函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pendding&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rj</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.reason </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//假如第一次实力的promise的</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pendding&#39;</span></span>
<span class="line"><span style="color:#24292E;">        data.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(rv, rj)</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;reject&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onRejectedCallbacks.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//将resolve和reject函数给使用者</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">executor</span><span style="color:#24292E;">(resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//如果在函数中抛出异常则将它注入reject中</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">onFulfilled</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onRejected</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// console.log(onFufilled.a)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//解决onFufilled,onRejected没有传值的问题</span></span>
<span class="line"><span style="color:#24292E;">    onFulfilled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> onFulfilled </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> onFulfilled </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">y</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> y</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后then的resolve中捕获</span></span>
<span class="line"><span style="color:#24292E;">    onRejected </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> onRejected </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> onRejected</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//声明一个promise对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> promise2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;resolve&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//因为在.then之后又是一个promise对象，所以这里肯定要返回一个promise对象</span></span>
<span class="line"><span style="color:#24292E;">      promise2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//因为穿透值的缘故，在默认的跑出一个error后，不能再用下一个的reject来接受，只能通过try，catch</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//因为有的时候需要判断then中的方法是否返回一个promise对象，所以需要判断</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果返回值为promise对象，则需要取出结果当作promise2的resolve结果</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果不是，直接作为promise2的resolve结果</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onFulfilled</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//抽离出一个公共方法来判断他们是否为promise对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">resolvePromise</span><span style="color:#24292E;">(promise2, x, resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;reject&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      promise2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onRejected</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.reason)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">resolvePromise</span><span style="color:#24292E;">(promise2, x, resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pendding&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      promise2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onResolvedCallbacks.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// to do....</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onFulfilled</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value)</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">resolvePromise</span><span style="color:#24292E;">(promise2, x, resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onRejectedCallbacks.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onRejected</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.reason)</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">resolvePromise</span><span style="color:#24292E;">(promise2, x, resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          })</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> promise2</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//catch方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">onRejected</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, onRejected)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">finally</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">P</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">P</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> value),</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">reason</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">P</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> reason</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">(</span><span style="color:#E36209;">onFulfilled</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onRejected</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">reason</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 抛出一个全局错误</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> reason</span></span>
<span class="line"><span style="color:#24292E;">      }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//resolve方法</span></span>
<span class="line"><span style="color:#24292E;">MyPromise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(val)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//reject方法</span></span>
<span class="line"><span style="color:#24292E;">MyPromise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(val)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//race方法</span></span>
<span class="line"><span style="color:#24292E;">MyPromise.</span><span style="color:#6F42C1;">race</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">promises</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> promises.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      promises[i].</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)</span></span>
<span class="line"><span style="color:#24292E;">MyPromise.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">promises</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    arr[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data</span></span>
<span class="line"><span style="color:#24292E;">    i</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> promises.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(arr)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> promises.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      promises[i].</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processData</span><span style="color:#24292E;">(i, data)</span></span>
<span class="line"><span style="color:#24292E;">      }, reject)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//promise语法糖 也用来测试</span></span>
<span class="line"><span style="color:#24292E;">MyPromise.deferred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MyPromise.</span><span style="color:#6F42C1;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  dfd.promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPromise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    dfd.resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resolve</span></span>
<span class="line"><span style="color:#24292E;">    dfd.reject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reject</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dfd</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promise规范  使用</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MyPromise</span></span>
<span class="line"><span style="color:#6A737D;">// export default Promise</span></span></code></pre></div><h2 id="ctrip" tabindex="-1">ctrip <a class="header-anchor" href="#ctrip" aria-label="Permalink to &quot;ctrip&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">handleStr</span><span style="color:#657B83;">(str) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">str</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">split</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">nums</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;&#39;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">words</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#657B83;">(</span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (element) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#DC322F;">/</span><span style="color:#CB4B16;">\\d</span><span style="color:#DC322F;">/</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">test</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">element</span><span style="color:#657B83;">)) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">nums</span><span style="color:#657B83;"> </span><span style="color:#859900;">+=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">element</span></span>
<span class="line"><span style="color:#657B83;">    } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#DC322F;">/</span><span style="color:#CB4B16;">[a-zA-Z]</span><span style="color:#DC322F;">/</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">test</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">element</span><span style="color:#657B83;">)) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">words</span><span style="color:#657B83;"> </span><span style="color:#859900;">+=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">element</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">uniqueStr</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">nums</span><span style="color:#657B83;">) </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">words</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">uniqueStr</span><span style="color:#657B83;">(str) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">str</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">split</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#657B83;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span></span>
<span class="line"><span style="color:#657B83;">    .</span><span style="color:#268BD2;">filter</span><span style="color:#657B83;">(</span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (element, index) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">indexOf</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">element</span><span style="color:#657B83;">) </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">index</span></span>
<span class="line"><span style="color:#657B83;">    })</span></span>
<span class="line"><span style="color:#657B83;">    .</span><span style="color:#268BD2;">join</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">str</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;携程C2t0r1i8p2020校招&#39;</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">handleStr</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">str</span><span style="color:#657B83;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleStr</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> words </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(element)) {</span></span>
<span class="line"><span style="color:#24292E;">      nums </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">[a-zA-Z]</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(element)) {</span></span>
<span class="line"><span style="color:#24292E;">      words </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uniqueStr</span><span style="color:#24292E;">(nums) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> words</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uniqueStr</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(element) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;携程C2t0r1i8p2020校招&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">handleStr</span><span style="color:#24292E;">(str))</span></span></code></pre></div><h3 id="写一个函数-列出一个整数所有的分解类型-比如对于数字4-可以做拆分得到下列字符串" tabindex="-1">写一个函数，列出一个整数所有的分解类型，比如对于数字4，可以做拆分得到下列字符串 <a class="header-anchor" href="#写一个函数-列出一个整数所有的分解类型-比如对于数字4-可以做拆分得到下列字符串" aria-label="Permalink to &quot;写一个函数，列出一个整数所有的分解类型，比如对于数字4，可以做拆分得到下列字符串&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">f</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#657B83;">args</span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#859900;">string</span><span style="color:#657B83;">[]) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">before</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">args</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">slice</span><span style="color:#657B83;">(</span><span style="color:#D33682;">0</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">args</span><span style="color:#657B83;">.length </span><span style="color:#859900;">-</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">n</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">args</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">.length </span><span style="color:#859900;">-</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">]</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">n</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">f</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">before</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">i</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">n</span><span style="color:#657B83;"> </span><span style="color:#859900;">-</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#268BD2;">f</span><span style="color:#657B83;">(</span><span style="color:#D33682;">9</span><span style="color:#657B83;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, args.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args[args.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">before, i, n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(args)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="实现flat函数" tabindex="-1">实现flat函数 <a class="header-anchor" href="#实现flat函数" aria-label="Permalink to &quot;实现flat函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#859900;">export</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#D33682;">1</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#D33682;">2</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#D33682;">3</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#D33682;">4</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  [</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">, [</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">, [</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">]]],</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#D33682;">5</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#2AA198;">&#39;string&#39;</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">  { name: </span><span style="color:#2AA198;">&#39;弹铁蛋同学&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">]</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">flat</span><span style="color:#657B83;">(arr) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reduce</span><span style="color:#657B83;">((acc, cur, index) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">acc</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">concat</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">isArray</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">cur</span><span style="color:#657B83;">) </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">flat</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">cur</span><span style="color:#657B83;">) </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">cur</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  }, [])</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">flat</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]]],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;弹铁蛋同学&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">acc</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cur</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> acc.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(cur) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">(cur) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur)</span></span>
<span class="line"><span style="color:#24292E;">  }, [])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">(arr))</span></span></code></pre></div><h3 id="group" tabindex="-1">group <a class="header-anchor" href="#group" aria-label="Permalink to &quot;group&quot;">​</a></h3><p>/**</p><ul><li>蚂蚁的笔试题</li></ul><p>给定整数 n 和 m，写一个函数 dispatch ，把 1-n 尽量平均地分成m个组 如</p><p>let n = 2, m = 2;</p><p>dispatch(n, m) 得到[[1], [2]]; 我自己实现的太烂了，所以想看看大家有没有什么好的实现方式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#859900;">*</span><span style="color:#657B83;"> @</span><span style="color:#268BD2;">param</span><span style="color:#657B83;"> {</span><span style="color:#268BD2;">number</span><span style="color:#657B83;">} </span><span style="color:#268BD2;">n</span></span>
<span class="line"><span style="color:#859900;">*</span><span style="color:#657B83;"> @</span><span style="color:#268BD2;">param</span><span style="color:#657B83;"> {</span><span style="color:#859900;">*</span><span style="color:#657B83;">} </span><span style="color:#268BD2;">m</span></span>
<span class="line"><span style="color:#657B83;"> </span><span style="color:#859900;">*/</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">dispatch</span><span style="color:#657B83;">(n, m) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">base</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Math</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">floor</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">n</span><span style="color:#657B83;"> </span><span style="color:#859900;">/</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">m</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">extra</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">n</span><span style="color:#657B83;"> </span><span style="color:#859900;">-</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">m</span><span style="color:#657B83;"> </span><span style="color:#859900;">*</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">base</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> [</span><span style="color:#859900;">...</span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">m</span><span style="color:#657B83;">)].</span><span style="color:#268BD2;">map</span><span style="color:#657B83;">((v, i) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">hasExtra</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">extra</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">jMax</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">base</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">hasExtra</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">baseNum</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">*</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">base</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">hasExtra</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">extra</span><span style="color:#657B83;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> [</span><span style="color:#859900;">...</span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">jMax</span><span style="color:#657B83;">)].</span><span style="color:#268BD2;">map</span><span style="color:#657B83;">((v, j) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">j</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">baseNum</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">dispatch</span><span style="color:#657B83;">(</span><span style="color:#D33682;">7</span><span style="color:#657B83;">, </span><span style="color:#D33682;">4</span><span style="color:#657B83;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">/**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">* </span><span style="color:#586E75;font-weight:bold;">@param</span><span style="color:#93A1A1;font-style:italic;"> </span><span style="color:#CB4B16;">{number}</span><span style="color:#93A1A1;font-style:italic;"> </span><span style="color:#268BD2;font-style:italic;">n</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">* </span><span style="color:#586E75;font-weight:bold;">@param</span><span style="color:#93A1A1;font-style:italic;"> </span><span style="color:#CB4B16;">{number}</span><span style="color:#93A1A1;font-style:italic;"> </span><span style="color:#268BD2;font-style:italic;">m</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">dispatch2</span><span style="color:#657B83;">(n, m) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">j</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">arrays</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">m</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) </span><span style="color:#268BD2;">arrays</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">([])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">j</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">n</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">j</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">j</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">) </span><span style="color:#859900;">%</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">m</span><span style="color:#657B83;">) </span><span style="color:#268BD2;">arrays</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">j</span><span style="color:#657B83;">].</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arrays</span></span>
<span class="line"><span style="color:#657B83;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;"> @param {number} n</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;"> @param {</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">} m</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">*/</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#24292E;">, </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> m)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> extra </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> base</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(m)].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">v</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> hasExtra </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> extra</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> jMax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> base </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (hasExtra </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> baseNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> base </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (hasExtra </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> extra)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(jMax)].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">v</span><span style="color:#24292E;">, </span><span style="color:#E36209;">j</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> baseNum)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">n</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">m</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch2</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#24292E;">, </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i,</span></span>
<span class="line"><span style="color:#24292E;">    j,</span></span>
<span class="line"><span style="color:#24292E;">    arrays </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) arrays.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">([])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> m) arrays[j].</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(i)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arrays</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="柯里化实现" tabindex="-1">柯里化实现 <a class="header-anchor" href="#柯里化实现" aria-label="Permalink to &quot;柯里化实现&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">add</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (a, b, c, d) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">a</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">b</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">c</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">d</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> (fn, arr </span><span style="color:#859900;">=</span><span style="color:#657B83;"> []) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> (</span><span style="color:#859900;">...</span><span style="color:#657B83;">args) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#93A1A1;font-style:italic;">//判断参数总数是否和fn参数个数相等</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> ([</span><span style="color:#859900;">...</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">].length </span><span style="color:#859900;">===</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.length) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">(</span><span style="color:#859900;">...</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">) </span><span style="color:#93A1A1;font-style:italic;">//拓展参数，调用fn</span></span>
<span class="line"><span style="color:#657B83;">    } </span><span style="color:#859900;">else</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">, [</span><span style="color:#859900;">...</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#268BD2;">args</span><span style="color:#657B83;">]) </span><span style="color:#93A1A1;font-style:italic;">//迭代，传入现有的所有参数</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">newadd</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">curry</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">add</span><span style="color:#657B83;">)</span></span>
<span class="line"><span style="color:#268BD2;">newadd</span><span style="color:#657B83;">(</span><span style="color:#D33682;">1</span><span style="color:#657B83;">, </span><span style="color:#D33682;">2</span><span style="color:#657B83;">)(</span><span style="color:#D33682;">3</span><span style="color:#657B83;">)(</span><span style="color:#D33682;">4</span><span style="color:#657B83;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#E36209;">d</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> d)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(args)</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断参数总数是否和fn参数个数相等</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args].</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> fn.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args) </span><span style="color:#6A737D;">//拓展参数，调用fn</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(fn, [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args]) </span><span style="color:#6A737D;">//迭代，传入现有的所有参数</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newadd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(add)</span></span>
<span class="line"><span style="color:#6F42C1;">newadd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span></code></pre></div>`,26),e=[o];function t(c,r,y,B,i,E){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
