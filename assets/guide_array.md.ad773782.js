import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.97257f7d.js";const D=JSON.parse('{"title":"js数组","description":"","frontmatter":{},"headers":[],"relativePath":"guide/array.md","filePath":"guide/array.md"}'),p={name:"guide/array.md"},o=l(`<h1 id="js数组" tabindex="-1">js数组 <a class="header-anchor" href="#js数组" aria-label="Permalink to &quot;js数组&quot;">​</a></h1><h2 id="filter" tabindex="-1">filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(array, </span><span style="color:#859900;">...</span><span style="color:#657B83;">values) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> { length: </span><span style="color:#268BD2;">arrayLength</span><span style="color:#657B83;"> } </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> { length: </span><span style="color:#268BD2;">valuesLength</span><span style="color:#657B83;"> } </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">values</span><span style="color:#657B83;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">index</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">index</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">valuesLength</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">index</span><span style="color:#657B83;"> </span><span style="color:#859900;">+=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">arrayLength</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">index</span><span style="color:#657B83;">] </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">values</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">index</span><span style="color:#657B83;">];</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">.length;</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">// --------------------------------------------------</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">filter</span><span style="color:#657B83;">(array, callback) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> { </span><span style="color:#268BD2;">length</span><span style="color:#657B83;"> } </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">index</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">index</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">length</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">index</span><span style="color:#657B83;"> </span><span style="color:#859900;">+=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">value</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">index</span><span style="color:#657B83;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">callback</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">value</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">index</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">)) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">result</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">value</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">filter</span><span style="color:#657B83;">([</span><span style="color:#D33682;">2</span><span style="color:#657B83;">, </span><span style="color:#D33682;">3</span><span style="color:#657B83;">, </span><span style="color:#D33682;">4</span><span style="color:#657B83;">, </span><span style="color:#D33682;">5</span><span style="color:#657B83;">], (data) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">data</span><span style="color:#657B83;"> </span><span style="color:#859900;">&gt;</span><span style="color:#657B83;"> </span><span style="color:#D33682;">3</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#E36209;">array</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">length</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">arrayLength</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">length</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">valuesLength</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> values;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> valuesLength; index </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    array[arrayLength </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> values[index];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> array.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// --------------------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">array</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> length; index </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array[index];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(value, index, array)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(result, value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">], (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#859900;">Array</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">myMap</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (fn, context) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#93A1A1;font-style:italic;">// 严格模式下</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">resultArr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">item</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">];</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">context</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">item</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">i</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">array</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">result</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">resultArr</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">result</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">resultArr</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">};</span></span>
<span class="line"><span style="color:#859900;">Array</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">myFilter</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (fn, context) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#859900;">typeof</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;"> </span><span style="color:#859900;">!==</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&quot;function&quot;</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">throw</span><span style="color:#657B83;"> </span><span style="color:#859900;">new</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">TypeError</span><span style="color:#657B83;">(</span><span style="color:#2AA198;">\`\${</span><span style="color:#268BD2;">fn</span><span style="color:#2AA198;">} is not a function\`</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">temp</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">context</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">], </span><span style="color:#268BD2;">i</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">if</span><span style="color:#657B83;"> (</span><span style="color:#268BD2;">result</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">      </span><span style="color:#268BD2;">temp</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">push</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">]);</span></span>
<span class="line"><span style="color:#657B83;">    }</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">temp</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">Array</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">myReduce</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (fn, initialValue) {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#859900;">Array</span><span style="color:#657B83;">.prototype.</span><span style="color:#268BD2;">slice</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">this</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">res</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">startIndex</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">res</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">initialValue</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">initialValue</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">[</span><span style="color:#D33682;">0</span><span style="color:#657B83;">];</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">startIndex</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">initialValue</span><span style="color:#657B83;"> </span><span style="color:#859900;">?</span><span style="color:#657B83;"> </span><span style="color:#D33682;">0</span><span style="color:#657B83;"> </span><span style="color:#859900;">:</span><span style="color:#657B83;"> </span><span style="color:#D33682;">1</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">for</span><span style="color:#657B83;"> (</span><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">startIndex</span><span style="color:#657B83;">; </span><span style="color:#268BD2;">i</span><span style="color:#657B83;"> </span><span style="color:#859900;">&lt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#657B83;">) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#268BD2;">res</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">fn</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">call</span><span style="color:#657B83;">(</span><span style="color:#B58900;">null</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">res</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">[</span><span style="color:#268BD2;">i</span><span style="color:#657B83;">], </span><span style="color:#268BD2;">i</span><span style="color:#657B83;">, </span><span style="color:#268BD2;">this</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">res</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [</span><span style="color:#2AA198;">&quot;x&quot;</span><span style="color:#657B83;">, </span><span style="color:#2AA198;">&quot;y&quot;</span><span style="color:#657B83;">, </span><span style="color:#2AA198;">&quot;z&quot;</span><span style="color:#657B83;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#268BD2;">arr</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">myMap</span><span style="color:#657B83;">(</span><span style="color:#586E75;font-weight:bold;">function</span><span style="color:#657B83;"> (item, index) {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">return</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">item</span><span style="color:#657B83;"> </span><span style="color:#859900;">+</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">\`\${</span><span style="color:#268BD2;">index</span><span style="color:#2AA198;">}\`</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#657B83;">  })</span></span>
<span class="line"><span style="color:#657B83;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 严格模式下</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">resultArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> array.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(context, item, i, array);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    resultArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resultArr;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">fn</span><span style="color:#032F62;">} is not a function\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(context, arr[i], i, arr);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result) {</span></span>
<span class="line"><span style="color:#24292E;">      temp.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myReduce</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">initialValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res, startIndex;</span></span>
<span class="line"><span style="color:#24292E;">  res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialValue </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> initialValue </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  startIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialValue </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> startIndex; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, res, arr[i], i, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;y&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;z&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">myMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">index</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>合并对象并不是一个罕见的问题，你很有可能已经遇到过这个问题，并且在不远的未来还会再次遇到。不同的是，在过去你手动完成了大部分工作，但从现在开始，你将使用 ES6 的新功能。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#93A1A1;font-style:italic;">// 合并对象</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">product</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> { name: </span><span style="color:#2AA198;">&#39;Milk&#39;</span><span style="color:#657B83;">, packaging: </span><span style="color:#2AA198;">&#39;Plastic&#39;</span><span style="color:#657B83;">, price: </span><span style="color:#2AA198;">&#39;5$&#39;</span><span style="color:#657B83;"> }</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">manufacturer</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> { name: </span><span style="color:#2AA198;">&#39;Company Name&#39;</span><span style="color:#657B83;">, address: </span><span style="color:#2AA198;">&#39;The Company Address&#39;</span><span style="color:#657B83;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">productManufacturer</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> { </span><span style="color:#859900;">...</span><span style="color:#268BD2;">product</span><span style="color:#657B83;">, </span><span style="color:#859900;">...</span><span style="color:#268BD2;">manufacturer</span><span style="color:#657B83;"> };</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">productManufacturer</span><span style="color:#657B83;">); </span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">// 输出 { name: &quot;Company Name&quot;, packaging: &quot;Plastic&quot;, price: &quot;5$&quot;, address: &quot;The Company Address&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">// 将对象数组合并成一个对象</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">cities</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Paris&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Lyon&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Marseille&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Rome&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Milan&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Palermo&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Genoa&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Berlin&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Hamburg&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;New York&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> }</span></span>
<span class="line"><span style="color:#657B83;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">result</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">cities</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">reduce</span><span style="color:#657B83;">((accumulator, item) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">  </span><span style="color:#859900;">return</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    </span><span style="color:#859900;">...</span><span style="color:#268BD2;">accumulator</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">    [</span><span style="color:#268BD2;">item</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">name</span><span style="color:#657B83;">]: </span><span style="color:#268BD2;">item</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">visited</span></span>
<span class="line"><span style="color:#657B83;">  }</span></span>
<span class="line"><span style="color:#657B83;">}, {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">result</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">/* 输出</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Berlin: &quot;no&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Genoa: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Hamburg: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Lyon: &quot;no&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Marseille: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Milan: &quot;no&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">New York: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Palermo: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Paris: &quot;no&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">Rome: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 合并对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">product</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;Milk&#39;</span><span style="color:#24292E;">, packaging: </span><span style="color:#032F62;">&#39;Plastic&#39;</span><span style="color:#24292E;">, price: </span><span style="color:#032F62;">&#39;5$&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">manufacturer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;Company Name&#39;</span><span style="color:#24292E;">, address: </span><span style="color:#032F62;">&#39;The Company Address&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">productManufacturer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">product, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">manufacturer };</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(productManufacturer); </span></span>
<span class="line"><span style="color:#6A737D;">// 输出 { name: &quot;Company Name&quot;, packaging: &quot;Plastic&quot;, price: &quot;5$&quot;, address: &quot;The Company Address&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将对象数组合并成一个对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cities</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Paris&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Lyon&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Marseille&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Rome&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Milan&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Palermo&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Genoa&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Berlin&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Hamburg&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;New York&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cities.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">accumulator</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">accumulator,</span></span>
<span class="line"><span style="color:#24292E;">    [item.name]: item.visited</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}, {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#6A737D;">/* 输出</span></span>
<span class="line"><span style="color:#6A737D;">Berlin: &quot;no&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Genoa: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Hamburg: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Lyon: &quot;no&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Marseille: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Milan: &quot;no&quot;</span></span>
<span class="line"><span style="color:#6A737D;">New York: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Palermo: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Paris: &quot;no&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Rome: &quot;yes&quot;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>数组映射</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">cities</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> [</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Paris&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Lyon&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Marseille&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Rome&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Milan&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Palermo&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Genoa&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Berlin&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;no&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;Hamburg&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> },</span></span>
<span class="line"><span style="color:#657B83;">    { name: </span><span style="color:#2AA198;">&#39;New York&#39;</span><span style="color:#657B83;">, visited: </span><span style="color:#2AA198;">&#39;yes&#39;</span><span style="color:#657B83;"> }</span></span>
<span class="line"><span style="color:#657B83;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">cityNames</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">Array</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">from</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">cities</span><span style="color:#657B83;">, ({ name}) </span><span style="color:#586E75;font-weight:bold;">=&gt;</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">name</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">cityNames</span><span style="color:#657B83;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-style:italic;">// 输出 [&quot;Paris&quot;, &quot;Lyon&quot;, &quot;Marseille&quot;, &quot;Rome&quot;, &quot;Milan&quot;, &quot;Palermo&quot;, &quot;Genoa&quot;, &quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;New York&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cities</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Paris&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Lyon&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Marseille&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Rome&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Milan&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Palermo&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Genoa&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Berlin&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;no&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;Hamburg&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;New York&#39;</span><span style="color:#24292E;">, visited: </span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cityNames</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(cities, ({ </span><span style="color:#E36209;">name</span><span style="color:#24292E;">}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> name);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(cityNames);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出 [&quot;Paris&quot;, &quot;Lyon&quot;, &quot;Marseille&quot;, &quot;Rome&quot;, &quot;Milan&quot;, &quot;Palermo&quot;, &quot;Genoa&quot;, &quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;New York&quot;]</span></span></code></pre></div><p>动态设置对象属性名</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-light vp-code-dark"><code><span class="line"><span style="color:#586E75;font-weight:bold;">const</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">dynamic</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> </span><span style="color:#2AA198;">&#39;email&#39;</span><span style="color:#657B83;">;</span></span>
<span class="line"><span style="color:#586E75;font-weight:bold;">let</span><span style="color:#657B83;"> </span><span style="color:#268BD2;">user</span><span style="color:#657B83;"> </span><span style="color:#859900;">=</span><span style="color:#657B83;"> {</span></span>
<span class="line"><span style="color:#657B83;">    name: </span><span style="color:#2AA198;">&#39;John&#39;</span><span style="color:#657B83;">,</span></span>
<span class="line"><span style="color:#657B83;">    [</span><span style="color:#268BD2;">dynamic</span><span style="color:#657B83;">]: </span><span style="color:#2AA198;">&#39;john@doe.com&#39;</span></span>
<span class="line"><span style="color:#657B83;">}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#657B83;">.</span><span style="color:#268BD2;">log</span><span style="color:#657B83;">(</span><span style="color:#268BD2;">user</span><span style="color:#657B83;">); </span><span style="color:#93A1A1;font-style:italic;">// 输出 { name: &quot;John&quot;, email: &quot;john@doe.com&quot; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [dynamic]: </span><span style="color:#032F62;">&#39;john@doe.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(user); </span><span style="color:#6A737D;">// 输出 { name: &quot;John&quot;, email: &quot;john@doe.com&quot; }</span></span></code></pre></div>`,11),e=[o];function t(c,r,y,i,B,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{D as __pageData,u as default};
